Description: > 
  Hoda Mohamed / deploying a hight Availability WebApp 
Parameters:
    EnvironmentName:
        Description: An Environment name that will be added
        Type: String
    VpcCIDR:
        Description: VPC IP
        Type: String
        Default: 10.0.0.0/16
    PublicSubnet1CIDR:
        Description: Public subnet 1 IP
        Type: String
        Default: 10.0.0.0/24

    PublicSubnet2CIDR:
        Description: Public subnet 2 IP
        Type: String
        Default: 10.0.1.0/24
    PrivateSubnet1CIDR:
        Description: Private subnet 1 IP
        Type: String
        Default: 10.0.2.0/24
    PrivateSubnet2CIDR:
        Description: Private subnet 2 IP
        Type: String
        Default: 10.0.3.0/24      
Resources:
    # VPC
      VPC:
        Type: AWS::EC2::VPC
        Properties:
            CidrBlock: !Ref VpcCIDR
            EnableDnsHostnames : true 
            Tags:
                 - Key: Name
                   Value: !Ref EnvironmentName    
      # Internet Gateway
      InternetGateway:
          Type: AWS::EC2::InternetGateway
          Properties: 
              Tags:
                    - Key: Name
                      Value: !Ref EnvironmentName  
      # Attach Internet Gateway to the VPC                
      InternetGatewayAttachment:
          Type: AWS::EC2::VPCGatewayAttachment
          Properties:
              InternetGatewayId: !Ref InternetGateway
              VpcId: !Ref VPC                   

      # Subnets
      # Public Subnet 1 
      PublicSubnet1:
        Type: AWS::EC2::Subnet
        Properties: 
            VpcId: !Ref VPC 
            AvailabilityZone: !Select [0, !GetAZs '']      
            CidrBlock: !Ref PublicSubnet1CIDR
            MapPublicIpOnLaunch: false
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Public Subnet (AZ1)    
      # Public Subnet 2 
      PublicSubnet2:
          Type: AWS::EC2::Subnet
          Properties: 
              VpcId: !Ref VPC 
              AvailabilityZone: !Select [1, !GetAZs '']      
              CidrBlock: !Ref PublicSubnet2CIDR
              MapPublicIpOnLaunch: false
              Tags:
                  - Key: Name
                    Value: !Sub ${EnvironmentName} Public Subnet (AZ2)        
      # Private Subnets
      # Private Subnet 1                      
      PrivateSubnet1:
                Type: AWS::EC2::Subnet
                Properties: 
                    VpcId: !Ref VPC 
                    AvailabilityZone: !Select [0, !GetAZs '']      
                    CidrBlock: !Ref PrivateSubnet1CIDR
                    MapPublicIpOnLaunch: false
                    Tags:
                        - Key: Name
                          Value: !Sub ${EnvironmentName} Private Subnet (AZ1)
      # Private Subnet 2                      
      PrivateSubnet2:
                Type: AWS::EC2::Subnet
                Properties: 
                    VpcId: !Ref VPC 
                    AvailabilityZone: !Select [1, !GetAZs '']      
                    CidrBlock: !Ref PrivateSubnet2CIDR
                    MapPublicIpOnLaunch: false
                    Tags:
                        - Key: Name
                          Value: !Sub ${EnvironmentName} private Subnet (AZ2)                    
    
      # Nat Gateways
      NatGateway1EIP:
        Type: AWS::EC2::EIP
        DependsOn: InternetGatewayAttachment
        Properties:
            Domain: vpc

      NatGateway2EIP:
          Type: AWS::EC2::EIP
          DependsOn: InternetGatewayAttachment
          Properties:
              Domain: vpc

      # Nat gateway 1
      NatGateway1:
        Type: AWS::EC2::NatGateway
        Properties:
            AllocationId: !GetAtt NatGateway1EIP.AllocationId
            SubnetId: !Ref PublicSubnet1

      # Nat gateway 2
      NatGateway2:
            Type: AWS::EC2::NatGateway
            Properties:
                AllocationId: !GetAtt NatGateway2EIP.AllocationId
                SubnetId: !Ref PublicSubnet2 

      # Route tables
      # Public Route table 
      PublicRouteTable:
          Type: AWS::EC2::RouteTable
          Properties:
              VpcId: !Ref VPC
              Tags:
                  - Key: Name
                    Value: !Sub ${EnvironmentName} Public Routes

      # Default Public Route table 
      DefaultPublicRoute:
          Type: AWS::EC2::Route
          DependsOn: InternetGatewayAttachment
          Properties:
              RouteTableId: !Ref PublicRouteTable
              DestinationCidrBlock: 0.0.0.0/0
              GatewayId: !Ref InternetGateway

      # Assign public subnets to it's route table
      PublicSubnet1RouteTableAssociation:
          Type: AWS::EC2::SubnetRouteTableAssociation
          Properties:
              RouteTableId: !Ref PublicRouteTable
              SubnetId: !Ref PublicSubnet1   
      
      PublicSubnet2RouteTableAssociation:
          Type: AWS::EC2::SubnetRouteTableAssociation
          Properties:
              RouteTableId: !Ref PublicRouteTable
              SubnetId: !Ref PublicSubnet2   

      # Private route tables
      # Private route table 1 and it's association
      PrivateRouteTable1:
          Type: AWS::EC2::RouteTable
          Properties:
              VpcId: !Ref VPC
              Tags:
                  - Key: Name
                    Value: !Sub ${EnvironmentName} Public Routes (AZ1)

      DefaultPrivateRoute1:
          Type: AWS::EC2::Route
          Properties:
              RouteTableId: !Ref PrivateRouteTable1
              DestinationCidrBlock: 0.0.0.0/0
              NatGatewayId: !Ref NatGateway1

      PrivateSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTable1
            SubnetId: !Ref PrivateSubnet1                      
      
      # Private route table 1 and it's association
      PrivateRouteTable2:
          Type: AWS::EC2::RouteTable
          Properties:
              VpcId: !Ref VPC
              Tags:
                  - Key: Name
                    Value: !Sub ${EnvironmentName} Public Routes (AZ2)

      DefaultPrivateRoute2:
          Type: AWS::EC2::Route
          Properties:
              RouteTableId: !Ref PrivateRouteTable2
              DestinationCidrBlock: 0.0.0.0/0
              NatGatewayId: !Ref NatGateway2
    
      PrivateSubnet2RouteTableAssociation:
          Type: AWS::EC2::SubnetRouteTableAssociation
          Properties:
              RouteTableId: !Ref PrivateRouteTable2
              SubnetId: !Ref PrivateSubnet2  

      #  Sec group
      LBSecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
          GroupDescription: Allow http to our load balancer
          VpcId:  !Ref VPC
          SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
          SecurityGroupEgress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
             
      WebServerSecGroup:
          Type: AWS::EC2::SecurityGroup         
          Properties:
              GroupDescription: Allow http to our hosts and SSH from local only
              VpcId: !Ref VPC
              SecurityGroupIngress:
                - IpProtocol: tcp
                  FromPort: 80
                  ToPort: 80
                  CidrIp: 0.0.0.0/0
              #  - IpProtocol: tcp
               #   FromPort: 22
               #   ToPort: 22
                #  CidrIp: 0.0.0.0/0
              SecurityGroupEgress:
                - IpProtocol: tcp
                  FromPort: 0
                  ToPort: 65535
                  CidrIp: 0.0.0.0/0
      # IAM role
      IamRole:
        Type: AWS::IAM::Role
        Properties:
          AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Principal:
                Service:
                - ec2.amazonaws.com
              Action:
              - sts:AssumeRole
          Path: "/"

      #Policy          
      IamPolicies:
        Type: AWS::IAM::Policy
        Properties:
          PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action: "s3:*"
              Resource: "*"
          Roles:
            - Ref: IamRole

      #InstanceProfile      
      IamInstanceProfile:
        Type: AWS::IAM::InstanceProfile
        Properties:
          Path: "/"
          Roles:
           - Ref: IamRole  

      #LaunchConfiguration      
      WebAppLaunchConfig:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
          UserData:
            Fn::Base64: !Sub |
              #!/bin/bash
              apt-get update -y
              apt-get install unzip awscli -y
              apt-get install apache2 -y
              systemctl start apache2.service
              cd /var/www/html
              aws s3 cp s3://udagram-678/udagram.zip .
              unzip -o Udagram.zip
          ImageId: ami-00ddb0e5626798373
          IamInstanceProfile: !Ref IamInstanceProfile
          SecurityGroups:
          - Ref: WebServerSecGroup
          InstanceType: t3.small
          BlockDeviceMappings:
          - DeviceName: "/dev/sdk"
            Ebs:
              VolumeSize: '10'  

      #TargetGroup        
      WebAppTargetGroup:
          Type: AWS::ElasticLoadBalancingV2::TargetGroup
          Properties:
            HealthCheckIntervalSeconds: 10
            HealthCheckPath: /
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 8
            HealthyThresholdCount: 2
            Port: 80
            Protocol: HTTP
            UnhealthyThresholdCount: 5
            VpcId:  !Ref VPC

      #Listener      
      Listener:
          Type: AWS::ElasticLoadBalancingV2::Listener
          Properties:
            DefaultActions:
            - Type: forward
              TargetGroupArn:
                Ref: WebAppTargetGroup
            LoadBalancerArn:
              Ref: WebAppLB
            Port: '80'
            Protocol: HTTP   

      #ListenerRule      
      ALBListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
          Actions:
          - Type: forward
            TargetGroupArn: !Ref WebAppTargetGroup
          Conditions:
          - Field: path-pattern
            Values: [/]
          ListenerArn: !Ref Listener
          Priority: 1  

      #AutoScalingGroup      
      WebAppGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
          VPCZoneIdentifier:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2

          LaunchConfigurationName: 
              Ref: WebAppLaunchConfig
          MinSize: '4'
          MaxSize: '6'
          TargetGroupARNs:
             - Ref: WebAppTargetGroup   

      #LoadBalancer      
      WebAppLB:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties:
          Subnets:
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2
          SecurityGroups:
            - Ref: LBSecGroup 

